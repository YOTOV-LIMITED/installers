{
  "name": "composer/installers",
  "tagline": "A Multi-Framework Composer Library Installer",
  "body": "# A Multi-Framework [Composer](http://getcomposer.org) Library Installer\r\n\r\n[![Build Status](http://img.shields.io/travis/composer/installers.svg)](http://travis-ci.org/composer/installers)\r\n\r\nThis is for PHP package authors to require in their `composer.json`. It will\r\ninstall their package to the correct location based on the specified package\r\ntype.\r\n\r\nThe goal of `installers` is to be a simple package type to install path map.\r\nUsers can also customize the install path per package and package authors can\r\nmodify the package name upon installing.\r\n\r\n`installers` isn't intended on replacing all custom installers. If your\r\npackage requires special installation handling then by all means, create a\r\ncustom installer to handle it.\r\n\r\n**Natively Supported Frameworks**:\r\n\r\nThe following frameworks natively work with Composer and will be\r\ninstalled to the default `vendor` directory. `composer/installers`\r\nis not needed to install packages with these frameworks:\r\n\r\n* Aura\r\n* Symfony2\r\n* Yii\r\n* Yii2\r\n\r\n**Current Supported Package Types**:\r\n\r\n> Stable types are marked as **bold**, this means that installation paths\r\n> for those type will not be changed. Any adjustment for those types would\r\n> require creation of brand new type that will cover required changes.\r\n\r\n| Framework    | Types\r\n| ---------    | -----\r\n| Aimeos       | `aimeos-extension`\r\n| Asgard       | `asgard-module`<br>`asgard-theme`\r\n| Attogram     | `attogram-module`\r\n| AGL          | `agl-module`\r\n| Bonefish     | `bonefish-package`\r\n| AnnotateCms  | `annotatecms-module`<br>`annotatecms-component`<br>`annotatecms-service`\r\n| Bitrix       | `bitrix-module` (deprecated) <br>`bitrix-component` (deprecated) <br>`bitrix-theme` (deprecated) <br><br> `bitrix-d7-module` <br> `bitrix-d7-component` <br> `bitrix-d7-template`\r\n| CakePHP 2+   | **`cakephp-plugin`**\r\n| Chef         | `chef-cookbook`<br>`chef-role`\r\n| CCFramework  | `ccframework-ship`<br>`ccframework-theme`\r\n| Cockpit      | `cockpit-module`\r\n| CodeIgniter  | `codeigniter-library`<br>`codeigniter-third-party`<br>`codeigniter-module`\r\n| concrete5    | `concrete5-block`<br>`concrete5-package`<br>`concrete5-theme`<br>`concrete5-update`\r\n| Craft        | `craft-plugin`\r\n| Croogo       | `croogo-plugin`<br>`croogo-theme`\r\n| Decibel      | `decibel-app`\r\n| DokuWiki     | `dokuwiki-plugin`<br>`dokuwiki-template`\r\n| Dolibarr     | `dolibarr-module`\r\n| Drupal       | <b>`drupal-core`<br>`drupal-module`<br>`drupal-theme`</b><br>`drupal-library`<br>`drupal-profile`<br>`drupal-drush`\r\n| Elgg         | `elgg-plugin`\r\n| ExpressionEngine 3         | `ee3-addon`<br>`ee3-theme`\r\n| FuelPHP v1.x | `fuel-module`<br>`fuel-package`<br/>`fuel-theme`\r\n| FuelPHP v2.x | `fuelphp-component`\r\n| Grav         | `grav-plugin`<br>`grav-theme`\r\n| Hurad        | `hurad-plugin`<br>`hurad-theme`\r\n| ImageCMS     | `imagecms-template`<br>`imagecms-module`<br>`imagecms-library`\r\n| Joomla       | `joomla-component`<br>`joomla-module`<br>`joomla-template`<br>`joomla-plugin`<br>`joomla-library`\r\n| Kirby        | **`kirby-plugin`**<br>`kirby-field`<br>`kirby-tag`\r\n| KodiCMS      | `kodicms-plugin`<br>`kodicms-media`\r\n| Kohana       | **`kohana-module`**\r\n| Laravel      | `laravel-library`\r\n| Lithium      | **`lithium-library`<br>`lithium-source`**\r\n| Magento      | `magento-library`<br>`magento-skin`<br>`magento-theme`\r\n| Mako         | `mako-package`\r\n| Mautic       | `mautic-plugin`<br>`mautic-theme`\r\n| MODX Evo     | `modxevo-snippet`<br>`modxevo-plugin`<br>`modxevo-module`<br>`modxevo-template`<br>`modxevo-lib`\r\n| MediaWiki    | `mediawiki-extension`\r\n| October      | **`october-module`<br>`october-plugin`<br>`october-theme`**\r\n| OXID         | `oxid-module`<br>`oxid-theme`<br>`oxid-out`\r\n| MODULEWork   | `modulework-module`\r\n| Moodle       | `moodle-*` (Please [check source](https://raw.githubusercontent.com/composer/installers/master/src/Composer/Installers/MoodleInstaller.php) for all supported types)\r\n| Piwik        | `piwik-plugin`\r\n| phpBB        | `phpbb-extension`<br>`phpbb-style`<br>`phpbb-language`\r\n| Pimcore      | `pimcore-plugin`\r\n| Plentymarkets      | `plentymarkets-plugin`\r\n| PPI          | **`ppi-module`**\r\n| Puppet       | `puppet-module`\r\n| RadPHP       | `radphp-bundle`\r\n| REDAXO       | `redaxo-addon`\r\n| ReIndex      | **`reindex-plugin`** <br> **`reindex-theme`**\r\n| Roundcube    | `roundcube-plugin`\r\n| shopware     | `shopware-backend-plugin`<br/>`shopware-core-plugin`<br/>`shopware-frontend-plugin`<br/>`shopware-theme`<br/>`shopware-plugin`<br/>`shopware-frontend-theme`\r\n| SilverStripe | `silverstripe-module`<br>`silverstripe-theme`\r\n| SMF          | `smf-module`<br>`smf-theme`\r\n| symfony1     | **`symfony1-plugin`**\r\n| Tusk         | `tusk-task`<br>`tusk-command`<br>`tusk-asset`\r\n| TYPO3 Flow   | `typo3-flow-package`<br>`typo3-flow-framework`<br>`typo3-flow-plugin`<br>`typo3-flow-site`<br>`typo3-flow-boilerplate`<br>`typo3-flow-build`\r\n| TYPO3 CMS    | `typo3-cms-extension` (Deprecated in this package, use the [TYPO3 CMS Installers](https://packagist.org/packages/typo3/cms-composer-installers) instead)\r\n| Vanilla      | `vanilla-plugin`<br>`vanilla-theme`\r\n| Wolf CMS     | `wolfcms-plugin`\r\n| WordPress    | <b>`wordpress-plugin`<br>`wordpress-theme`</b><br>`wordpress-muplugin`\r\n| YAWIK        | `yawik-module`\r\n| Zend         | `zend-library`<br>`zend-extra`<br>`zend-module`\r\n| Zikula       | `zikula-module`<br>`zikula-theme`\r\n| Prestashop   | `prestashop-module`<br>`prestashop-theme`\r\n| Phifty       | `phifty-bundle`<br>`phifty-framework`<br>`phifty-library`\r\n\r\n## Example `composer.json` File\r\n\r\nThis is an example for a CakePHP plugin. The only important parts to set in your\r\ncomposer.json file are `\"type\": \"cakephp-plugin\"` which describes what your\r\npackage is and `\"require\": { \"composer/installers\": \"~1.0\" }` which tells composer\r\nto load the custom installers.\r\n\r\n```json\r\n{\r\n    \"name\": \"you/ftp\",\r\n    \"type\": \"cakephp-plugin\",\r\n    \"require\": {\r\n        \"composer/installers\": \"~1.0\"\r\n    }\r\n}\r\n```\r\n\r\nThis would install your package to the `Plugin/Ftp/` folder of a CakePHP app\r\nwhen a user runs `php composer.phar install`.\r\n\r\nSo submit your packages to [packagist.org](http://packagist.org)!\r\n\r\n## Custom Install Paths\r\n\r\nIf you are consuming a package that uses the `composer/installers` you can\r\noverride the install path with the following extra in your `composer.json`:\r\n\r\n```json\r\n{\r\n    \"extra\": {\r\n        \"installer-paths\": {\r\n            \"your/custom/path/{$name}/\": [\"shama/ftp\", \"vendor/package\"]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nA package type can have a custom installation path with a `type:` prefix.\r\n\r\n``` json\r\n{\r\n    \"extra\": {\r\n        \"installer-paths\": {\r\n            \"your/custom/path/{$name}/\": [\"type:wordpress-plugin\"]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nYou can also have the same vendor packages with a custom installation path by\r\nusing the `vendor:` prefix.\r\n\r\n``` json\r\n{\r\n    \"extra\": {\r\n        \"installer-paths\": {\r\n            \"your/custom/path/{$name}/\": [\"vendor:my_organization\"]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThese would use your custom path for each of the listed packages. The available\r\nvariables to use in your paths are: `{$name}`, `{$vendor}`, `{$type}`.\r\n\r\n## Custom Install Names\r\n\r\nIf you're a package author and need your package to be named differently when\r\ninstalled consider using the `installer-name` extra.\r\n\r\nFor example you have a package named `shama/cakephp-ftp` with the type\r\n`cakephp-plugin`. Installing with `composer/installers` would install to the\r\npath `Plugin/CakephpFtp`. Due to the strict naming conventions, you as a\r\npackage author actually need the package to be named and installed to\r\n`Plugin/Ftp`. Using the following config within your **package** `composer.json`\r\nwill allow this:\r\n\r\n```json\r\n{\r\n    \"name\": \"shama/cakephp-ftp\",\r\n    \"type\": \"cakephp-plugin\",\r\n    \"extra\": {\r\n        \"installer-name\": \"Ftp\"\r\n    }\r\n}\r\n```\r\n\r\nPlease note the name entered into `installer-name` will be the final and will\r\nnot be inflected.\r\n\r\n## Contribute!\r\n\r\n* [Fork and clone](https://help.github.com/articles/fork-a-repo).\r\n* Run the command `php composer.phar install` to install the dependencies.\r\n  This will also install the dev dependencies. See [Composer](https://getcomposer.org/doc/03-cli.md#install).\r\n* Use the command `phpunit` to run the tests. See [PHPUnit](http://phpunit.de).\r\n* Create a branch, commit, push and send us a\r\n  [pull request](https://help.github.com/articles/using-pull-requests).\r\n\r\nTo ensure a consistent code base, you should make sure the code follows the\r\n[Coding Standards](http://symfony.com/doc/2.0/contributing/code/standards.html)\r\nwhich we borrowed from Symfony.\r\n\r\nIf you would like to help, please take a look at the list of\r\n[issues](https://github.com/composer/installers/issues).\r\n\r\n### Should we allow dynamic package types or paths? No.\r\nWhat are they? The ability for a package author to determine where a package\r\nwill be installed either through setting the path directly in their\r\n`composer.json` or through a dynamic package type: `\"type\":\r\n\"framework-install-here\"`.\r\n\r\nIt has been proposed many times. Even implemented once early on and then\r\nremoved. `installers` won't do this because it would allow a single package\r\nauthor to wipe out entire folders without the user's consent. That user would\r\nthen come here to yell at us.\r\n\r\nAnyone still wanting this capability should consider requiring https://github.com/oomphinc/composer-installers-extender.\r\n",
  "google": "UA-32631384-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}